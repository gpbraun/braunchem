%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  ______                       _____ _                      %
%  | ___ \                     /  __ \ |                     %
%  | |_/ /_ __ __ _ _   _ _ __ | /  \/ |__   ___ _ __ ___    %
%  | ___ \ '__/ _` | | | | '_ \| |   | '_ \ / _ \ '_ ` _ \   %
%  | |_/ / | | (_| | |_| | | | | \__/\ | | |  __/ | | | | |  %
%  \____/|_|  \__,_|\__,_|_| |_|\____/_| |_|\___|_| |_| |_|  %
%                                                            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  The "braundb" Package
%
%          --  Problem Database Management  -- 
%
%============================================================%
%
%  GABRIEL P. BRAUN, 2019-2021
%
%============================================================%
%
%  CONTACT: braun.pineschi@gmail.com
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   PACKAGE REQUIREMENTS AND SETUP                   
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\PassOptionsToPackage{blank,no-files,use-aux}{xsim}

\RequirePackage{ 
	xsim,
	booktabs,
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   PACKAGE IDENTIFICATION                        
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\ProvidesExplPackage{braundb}{2021/07/03}{1.0}%
{ Problem Database Managment }

%============================================================%
%   VARIANTS OF KERNEL FUNCTIONS
%============================================================%

\cs_generate_variant:Nn \skip_horizontal:n  {V}
\cs_generate_variant:Nn \seq_set_split:Nnn  {Nnx}
\cs_generate_variant:Nn \file_if_exist:nTF  {VTF}
\cs_generate_variant:Nn \file_input:n       {V}
\cs_generate_variant:Nn \clist_put_right:Nn {NV}
\cs_generate_variant:Nn \clist_put_right:Nn {Ne}
\cs_generate_variant:Nn \file_input:n       {x}
\cs_generate_variant:Nn \int_eval:n         {V}
\cs_generate_variant:Nn \file_if_exist:nTF  {xTF}
\cs_generate_variant:Nn \int_compare:nNnT   {VNnT}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   SET PROBLEM DATABASE            
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tl_new:N  \g_braun_problem_db_path_tl

\cs_set:Npn \DBPath #1
	{ % Set path to database
		\group_begin:
			\tl_gset:Nn     \g_braun_problem_db_path_tl {#1} 
			\file_input:n { \g_braun_problem_db_path_tl / .db-paths.sty }
		\group_end:
	}

%============================================================%
%	GET PROBLEMS FROM DATABASE
%============================================================%

% #1 -> cslist with problems from database
\cs_set:Npn \InputDB #1
	{
		\group_begin:
			\clist_set:Nn \l_tmpa_clist {#1}
			\clist_map_inline:Nn \l_tmpa_clist 
				{ 
					\prop_get:NnNTF \l_braun_db_prop {##1} \l_tmpa_tl
					{
						\tl_put_left:Nn  \l_tmpa_tl 
							{ \g_braun_problem_db_path_tl / }
						\tl_set:Nn \l_tmpb_tl { \l_tmpa_tl / ##1 .tex }

						\file_if_exist:VTF \l_tmpb_tl
							{ 	 
								\file_input:V \l_tmpb_tl
							}
							{ \msg_warning_text:n{File:~##1~not~found!} }
					}
					{ \msg_warning_text:n{Problem:~##1~not~found!} }
				}
		\group_end:
	}

%============================================================%
%	RECURSIVE INPUT FROM FOLDER
%============================================================%

\cs_new:Npn \bool_do_break: { \prg_map_break:Nn \bool_do_break: {} }

\cs_gset:Npn \bool_do_while:Nn #1 #2
	{
		#2
		\bool_if:NT #1 { \bool_do_while:Nn #1 {#2} }
		\prg_break_point:Nn \bool_do_break: {}
	}

\int_zero_new:N \l__braun_inputsp_tmp_int

% Iterate over path1, path2, path3, ... and inputs all files
% #2 -> file path + name
\cs_set:Npn \InputSP #1
	{
		\group_begin:
			\bool_do_while:Nn \c_true_bool
				{
					\int_incr:N \l__braun_inputsp_tmp_int
					
					\file_if_exist:nTF 
						{ #1 \int_eval:V \l__braun_inputsp_tmp_int . tex }
						{
							\file_input:x 
								{ 
									#1
									\int_eval:V \l__braun_inputsp_tmp_int 
									.tex 
								}
						}
						{ \bool_do_break: }
				}
			\int_compare:VNnT \l__braun_inputsp_tmp_int = {1}
				{
					\msg_warning_text:n {File~#1 1 .tex ~not~found!}
				}
		\group_end:
	}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   XSIM PATCH         
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareExerciseProperty { path }

\cs_set_protected:Npn \xsim_exercise_setup:nn #1#2
	{
		\int_gincr:N \g_xsim_id_int
		\int_compare:nF { \g_xsim_max_id_int > \g_xsim_id_int }
			{ \int_gset_eq:NN \g_xsim_max_id_int \g_xsim_id_int }
		\tl_gset:Nx \g_xsim_exercise_id_tl { \int_use:N \g_xsim_id_int }
		\tl_gset:Nn \g_xsim_exercise_type_tl {#1}
		\xsim_add_to_list:nx {idtypes} { \g_xsim_exercise_id_tl == {#1} }
		\xsim_foreach_goal:n
			{
				\xsim_if_property_set:nVnT {#1} \g_xsim_exercise_id_tl {##1}
					{
						\bool_set_true:c {l__xsim_temporary_##1_bool}
						\fp_set:cn {l__xsim_temporary_##1_fp}
							{ \xsim_get_property:nVn {#1} \g_xsim_exercise_id_tl {##1} }
						\xsim_unset_property:nVn {#1} \g_xsim_exercise_id_tl {##1}
					}
			}
		\xsim_set_properties:nVe {#1} \g_xsim_exercise_id_tl
			{
				% properties set by the user:
				\exp_not:n {#2} ,
				% properties which need to have certain values:
				id = \g_xsim_exercise_id_tl ,
				printed = false ,
				used = false ,
				ID = \g_file_curr_name_str ,  % patch!
				path = \g_file_curr_dir_str , % patch!
			}
		\xsim_foreach_goal:n
			{
				\xsim_if_property_set:nVnT {#1} \g_xsim_exercise_id_tl {##1}
					{
						\xsim_set_property:nVne {#1} \g_xsim_exercise_id_tl {user##1}
							{ \xsim_get_property:nVn {#1} \g_xsim_exercise_id_tl {##1} }
					}
				\bool_if:cT {l__xsim_temporary_##1_bool}
					{
						\xsim_set_property:nVne {#1} \g_xsim_exercise_id_tl {##1}
							{ \fp_to_decimal:c {l__xsim_temporary_##1_fp} }
					}
			}
	}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   GENERAL PARAMETERS  
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareExerciseProperty { source }
\DeclareExerciseProperty { local  }
\DeclareExerciseProperty { year   }
\DeclareExerciseProperty { obs    } 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   ANSWER  
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareExerciseProperty { answer } % Short Answer

%============================================================%
%   ANSWER
%============================================================%

\cs_new:Nn \braun_print_answer:n
    {
        \group_begin:
            \seq_set_split:Nnx \l_tmpa_seq {;} {#1}
            \seq_remove_all:Nn \l_tmpa_seq {}
            %% FIGURE FILE PATH
            \tl_if_exist:NT \g_bchem_molecule_path_tl 
                {
                    \tl_set:Nn \g_bchem_molecule_path_tl 
                        { \GetExerciseProperty { path } }
                    \tl_set:Nn \g_bchem_molecule_filename_tl
                        { \GetExerciseProperty {  ID  } }
                }
            %% TASKS LIST
            \int_compare:nNnTF { \seq_count:N \l_tmpa_seq } > {1}
                {
                    \exp_args:Nnx \begin { tasks }
                    {
                        \exp_not:N \item \seq_use:Nn \l_tmpa_seq { \item }
                    }
                    \end { tasks }
                }
                {#1}
        \group_end:
    }

%============================================================%
%   ALL ANSWERS
%============================================================%

\keys_define:nn { braun/problems/answer }
    {
        header .tl_set:N  = \l_braun_makegaba_header_tl,
        header .initial:n = \section * { Gabarito },
    }

% #1 -> keyval: braun/problems/answer
\NewDocumentCommand \makegaba
    { o }
    {
		\group_begin:
			\IfNoValueF {#1} { \keys_set:nn { braun/db/gaba } {#1} }

			\tl_use:N \l_braun_makegaba_header_tl

			\addcontentsline { toc } { section } { Gabarito }
			\refstepcounter          { section }
			
			\small
			\enumerate
			\ForEachUsedExerciseByID
				{
					\item 
						[ 
							\usekomafont { disposition } 
							\ExercisePropertyGet { problem } {##2} { counter }.
						]
					\braun_print_answer:n 
						{ \ExercisePropertyGet{problem}{##2}{answer} }
				}
			\endenumerate
        \group_end:
		\cs_undefine:N \makegaba
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   MATH
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareExerciseProperty { math }

\keys_define:nn { braun/problems/makedata/math }
    { 
        title .tl_set:N  = \l_braun_data_math_title_tl,
        title .initial:n = Constantes~ MatemÃ¡ticas,

        math .clist_set:N = \l_braun_data_math_clist,

        unknown .code:n = \exp_args:Ne \sisetup { \l_keys_key_tl } {#1},
    }

% #1 -> sequence
\cs_set:Nn \braun_print_math:N
    { % prints evaluation of math funcion clist
        \skip_horizontal:V \l_braun_data_indent_dim
        \clist_map_inline:Nn #1
            {
                \c_math_toggle_token 
                    \braun_display_math:n {##1} = 
                    \num 
                        [
                            round-mode = places,
                            round-precision = 2, 
                            exponent-mode = scientific,
                        ] 
                        { \fp_eval:n {##1} } 
                \c_math_toggle_token \quad
            }
    }
    
% 1# -> raw math
\cs_set:Nn \braun_display_math:n
    { % converts raw math to LaTeX
        \group_begin:
            \tl_set:Nn        \l_tmpa_tl {#1}
            \tl_remove_all:Nn \l_tmpa_tl {~}
            \regex_replace_all:nnN % pi
                { pi }
                { \c{pi} }   
                \l_tmpa_tl
            \regex_replace_all:nnN % exponential
                { exp \( ( .* ) \) }
                { e^{\1} }   
                \l_tmpa_tl
            \regex_replace_all:nnN % base x log
                { ln \( ( .* ) \) / ln \( ( .* ) \) }
                { \c{log}_\{ \2 \} \( \1 \) }   
                \l_tmpa_tl
            \regex_replace_all:nnN % degree operators
                { (sin|cos|tan|cot|csc|sec)d \( ( .* ) \) }
                { \c{\1}\( \c{ang} \{ \2 \} \) }   
                \l_tmpa_tl
            \regex_replace_all:nnN % operators
                { (ln|exp|sin|cos|tan|cot|csc|sec) }
                { \c{\1} }   
                \l_tmpa_tl
            \regex_replace_all:nnN % square root
                { sqrt \( ( .* ) \) } 
                { \c{sqrt} \{ \1 \} } 
                \l_tmpa_tl
            \tl_use:N \l_tmpa_tl
        \group_end:
    }

%============================================================%
%   \makedata FUNCTION
%============================================================%

\cs_set:Npn \braun_makedata_math:
    {
        \clist_if_empty:NF \l_braun_data_math_clist
            {
                \exp_args:NNV \subsubsection * \l_braun_data_math_title_tl
                \braun_print_math:N \l_braun_data_math_clist
            }
		\cs_undefine:N \braun_makedata_math:
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   ELEMENTS   
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareExerciseProperty { elements }

\keys_define:nn { braun/problems/makedata/elements }
    { 
        elements .clist_set:N = \l_braun_data_elements_clist,
        elements .initial:n   = { H, C, N, O },

        style .choices:nn = { ptable, table, line }
            { \tl_set:Nn \l_braun_data_elements_style_tl {#1} },
        style .initial:n  = table,

        title .tl_set:N  = \l_braun_data_elements_title_tl,
        title .initial:n = Elementos,
    }

% #1 -> elements clist
\cs_new:Nn \braun_print_problem_elements:N
    {
        \group_begin:
        \ForEachUsedExerciseByID
            {
                \clist_put_right:Ne #1
                { \ExercisePropertyGet{problem}{##2}{elements} }
            }
        \str_case:Vn \l_braun_data_elements_style_tl
            {
                { ptable } 
                { 
                    \center 
                    \ptable_row:nV {property=mass} #1
                    \endcenter
                }
                { table } 
                { 
                    \center
                    \exp_args:NV \ITAMassTable #1
                    \endcenter
                }
            }
        \group_end:
    }

%============================================================%
%   \makedata FUNCTION
%============================================================%

\cs_set:Npn \braun_makedata_elements:
    {
        \clist_if_empty:NF \l_braun_data_elements_clist
            {
                \exp_args:NNV \subsubsection * \l_braun_data_elements_title_tl
                \skip_vertical:n {2ex}
                \braun_print_problem_elements:N \l_braun_data_elements_clist
                \skip_vertical:n {2ex}
            }
		\cs_undefine:N \braun_makedata_elements:
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   PROBLEM DATA v2
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareExerciseProperty { data } % Holds additional data for the problem

\keys_define:nn { braun/problems/makedata/data }
    { 
        title .tl_set:N  = \l_braun_data_front_title_tl,
        title .initial:n = Dados,

        unknown .code:n = \exp_args:Ne \sisetup { \l_keys_key_tl } {#1},
    }

% #1 -> key 
% #2 -> name
% #3 -> symbol
% #4 -> value
% #5 -> unit
\cs_set:Npn \AddData  #1 #2 #3 #4 #5
    {
        \tl_const:cn { c_data_#1_name_tl   } { \tl_trim_spaces:n {#2} }
        \tl_const:cn { c_data_#1_symbol_tl } {#3}
        \tl_const:cn { c_data_#1_value_tl  } {#4}
        \tl_const:cn { c_data_#1_unit_tl   } {#5} 
    }

%============================================================%
%   GET DATA VALUES
%============================================================%

%% Retrieve values from DataBase
% #1 -> data tag
\cs_set:Npn \braun_get_data_name:n   #1
    { \text_titlecase_first:n { \tl_use:c { c_data_#1_name_tl } } }
% #1 -> data tag
\cs_set:Npn \braun_get_data_symbol:n #1
    { \ensuremath { \tl_use:c { c_data_#1_symbol_tl } } }
% #1 -> data tag
\cs_set:Npn \braun_get_data_value:n  #1
    {  \tl_use:c { c_data_#1_value_tl }  }
% #1 -> data tag
\cs_set:Npn \braun_get_data_unit:n   #1
    { \unit { \tl_use:c { c_data_#1_unit_tl } } }

%============================================================%
%   ORGANIZE DATA SEQUENCES
%============================================================%

%% Remove duplicates
% #1 -> sequence
% #2 -> data group
% #3 -> sorting parameter
\cs_set:Nn \braun_data_organize:Nnn
    {
        %% Remove duplicates
        \seq_remove_duplicates:N #1
        %% Remove undefined data
        \seq_map_inline:Nn #1
            {
                \tl_if_exist:cF { c_#2_##1_name_tl } 
                    { \seq_remove_all:Nn #1 {##1} }
            }  
        %% Sort data
        \seq_sort:Nn #1
            {
                \int_compare:nTF 
                    { 
                        \tex_strcmp:D 
                            { \tl_use:c { c_#2_##1_#3_tl } } 
                            { \tl_use:c { c_#2_##2_#3_tl } } = -1 
                    }
                    { \sort_return_same:    }
                    { \sort_return_swapped: }
            }    
    }

\seq_new:N \l_braun_data_problems_seq

%============================================================%
%   PRINT DATA TABLE
%============================================================%

% #1 -> Data sequence
\cs_set:Nn \braun_print_data:N
    {
        \skip_horizontal:V \l_braun_data_indent_dim
        \group_begin:
            \BraunNoWarning
            \braun_data_organize:Nnn #1 { data } { name } % order by name
            \tl_set:Nn \arraystretch    { 1.3  }
            \sisetup
                {  
                    table-align-text-after = false, 
                    table-align-exponent = false,
                    round-mode = figures, 
                    round-precision = 3, 
                    table-format = +3.2e2,
                }
            \exp_args:Nx \tabular 
                { 
                    @ {}
                    \legacy_if:nTF { @twocolumn } { l } { ll } % name/symbol
                    c % equal
                    @ { \; }
                    S % value
                }
                \seq_map_inline:Nn #1
                    { 
                        \legacy_if:nTF { @twocolumn } {}
                            { \braun_get_data_name:n {##1} \c_alignment_token }
                        \braun_get_data_symbol:n {##1} \c_alignment_token 
                        \ensuremath{ = }               \c_alignment_token 
                        \braun_get_data_value:n  {##1} \; 
                        \braun_get_data_unit:n   {##1} 
                        \tex_cr:D
                    }  
            \endtabular
        \group_end:
        \skip_vertical:n { -2em }
    }

%============================================================%
%   GET DATA FROM PROBLEMS
%============================================================%

\seq_new:N  \l__braun_data_from_problem_tmp_seq

% #1 -> Sequence to store all problem data
\cs_set:Npn \braun_get_data_from_problems:N #1
    {
        \ForEachUsedExerciseByID
            {
                \seq_set_split:Nnx \l__braun_data_from_problem_tmp_seq {,}
                    { \ExercisePropertyGet { problem } {##2} { data } }
                \seq_concat:NNN #1 #1 \l__braun_data_from_problem_tmp_seq
            }
    }

%============================================================%
%   \makedata FUNCTION
%============================================================%

\cs_set:Npn \braun_makedata_data:
    {
        \bool_if:NT \g_braun_all_data_print_bool
            {
                \group_begin:
                    \exp_args:NNV \subsubsection * \l_braun_data_front_title_tl
                    \braun_get_data_from_problems:N \l_braun_data_problems_seq
                    \braun_print_data:N \l_braun_data_problems_seq
                \group_end: 
            }
		\cs_undefine:N \braun_makedata_data:
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   CONSTANTS
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\DeclareExerciseProperty { constants } % Constants required by the problem

\keys_define:nn { braun/problems/makedata/constants }
    { 
        constants .code:n = \seq_set_split:Nnn \l_braun_data_constants_seq {,} {#1},
        constants .initial:n =  { g, e, Na, h, Ryd, R, me, c },

        title .tl_set:N  = \l_braun_data_constants_title_tl,
        title .initial:n = Constantes,

        unknown .code:n = \exp_args:Ne \sisetup { \l_keys_key_tl } {#1},
    }

%============================================================%
%   \makedata FUNCTION
%============================================================%

\cs_set:Npn \braun_makedata_constants:
    {
        \seq_if_empty:NF \l_braun_data_constants_seq 
            {
                \group_begin:
                    \exp_args:NNV \subsubsection * \l_braun_data_constants_title_tl
                    \sisetup { exponent-mode = scientific }
                    \braun_print_data:N \l_braun_data_constants_seq 
                \group_end:
            }
		\cs_undefine:N \braun_makedata_constants:
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   DEFINITIONS
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\keys_define:nn { braun/problems/makedata/definitions }
    { 
        %% CONSTANTS
        definitions .code:n = 
			\seq_set_split:Nnn \l_braun_data_definitions_seq {,} {#1},
        definitions .initial:n =  { CNTP, Atm },

        title .tl_set:N  = \l_braun_data_definitions_title_tl ,
        title .initial:n = DefiniÃ§Ãµes,

        unknown .code:n = \exp_args:Ne \sisetup { \l_keys_key_tl } {#1},
    }

% #1 -> key 
% #2 -> name
% #3 -> text
\cs_set:Npn \AddDefinition #1 #2 #3
    {
        \tl_const:cn { c_definition_#1_name_tl } {#2}  
        \tl_const:cn { c_definition_#1_text_tl } {#3} 
    }

%============================================================%
%   GET DEFINITION VALUES
%============================================================%

%% Retrieve values from DataBase
% #1 -> data tag
\cs_set:Nn \braun_get_definition_name:n
    { \text_titlecase_first:n { \tl_use:c { c_definition_#1_name_tl } } }
% #1 -> data tag
\cs_set:Nn \braun_get_definition_text:n
    { \tl_use:c { c_definition_#1_text_tl } }

%============================================================%
%   PRINT DEFINITION TABLE
%============================================================%

% #1 -> Definitions sequence
\cs_set:Nn \braun_print_definitions:N
    {
        \skip_horizontal:V \l_braun_data_indent_dim
        \group_begin:
            \BraunNoWarning
            \braun_data_organize:Nnn #1 { definition } { name } % order by name
            \tl_set:Nn \arraystretch    { 1.3 }
            \tabular { @{} l l }
            \seq_map_inline:Nn #1
                {
                    \braun_get_definition_name:n {##1}
                    \c_alignment_token
                    \braun_get_definition_text:n {##1} 
                    \tex_cr:D
                }  
            \endtabular
        \group_end:
        \skip_vertical:n { -2em }
    }

%============================================================%
%   \makedata FUNCTION
%============================================================%

\cs_set:Npn \braun_makedata_definitions:
    {
        \seq_if_empty:NF \l_braun_data_definitions_seq 
            {
                \group_begin:
                    \exp_args:NNV \subsubsection * \l_braun_data_definitions_title_tl
                    \braun_print_definitions:N \l_braun_data_definitions_seq
                \group_end:
            }
		\cs_undefine:N \braun_makedata_definitions:
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   MAKEDATA
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\keys_define:nn { braun/problems/makedata }
    { 
        header .tl_set:N = \l_braun_data_header_tl,

        print .clist_set:N = \l_braun_data_print_clist,
        print .initial:n   = { constants, data, definitions, elements, math },

        data-indent .dim_set:N = \l_braun_data_indent_dim,
        data-indent .initial:n = \parindent,

        front-data .bool_gset:N = \g_braun_all_data_print_bool,
        front-data .initial:n   = false,
        front-data .default:n   = true,

        unknown .code:n = \exp_args:Ne \sisetup { \l_keys_key_tl } {#1},
    }

\NewDocumentCommand \makedata
    { o }
    {
        \group_begin:
            \IfValueT {#1} { \keys_set:nn { braun/problems/makedata } {#1} }
            \tl_use:N \l_braun_data_header_tl 
            \clist_map_inline:Nn \l_braun_data_print_clist 
				{ \use:c { braun_makedata_##1: } }
        \group_end:
        %\skip_vertical:n { 1em }
		\cs_undefine:N \makedata
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   MODULES               
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\file_input:n { database / database.tex }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                              
%   THE END                
%                                              
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%